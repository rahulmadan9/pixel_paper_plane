rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // User profile data - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // User stats and preferences
      match /stats/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Individual score entries - authenticated users can write their own scores
    match /scores/{scoreId} {
      allow read: if true; // Anyone can read scores for leaderboards
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && isValidScore(request.resource.data);
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // User-specific score collections
    match /userScores/{userId} {
      allow read: if true; // Public for leaderboard purposes
      allow write: if request.auth != null && request.auth.uid == userId;
      
      match /scores/{scoreId} {
        allow read: if true;
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && isValidScore(request.resource.data);
        allow update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Global leaderboards - read-only for clients, managed by cloud functions
    match /leaderboards/{leaderboardType} {
      allow read: if true;
      allow write: if false; // Only cloud functions can write leaderboards
      
      match /entries/{document=**} {
        allow read: if true;
        allow write: if false;
      }
    }
    
    // Game sessions for analytics (optional)
    match /sessions/{sessionId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // Administrative data - only for admin users
    match /admin/{document=**} {
      allow read, write: if request.auth != null 
        && request.auth.token.admin == true;
    }
  }
  
  // Helper functions for validation
  function isValidScore(data) {
    return data.keys().hasAll(['score', 'userId', 'timestamp', 'gameMode']) 
      && data.score is number 
      && data.score >= 0 
      && data.score <= 10000 // Reasonable maximum
      && data.userId is string
      && data.timestamp is timestamp
      && data.gameMode in ['normal', 'challenge']; // Add more modes as needed
  }
  
  function isAuthenticated() {
    return request.auth != null;
  }
  
  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }
} 